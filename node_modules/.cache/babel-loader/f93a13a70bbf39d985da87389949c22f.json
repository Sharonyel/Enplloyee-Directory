{"ast":null,"code":"var _jsxFileName = \"/Users/sharonyvette/classreview/src/App.js\";\n// src/App.js\nimport React from \"react\";\nimport API from \"./utils/API.js\";\nimport User from \"./component/User\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      name: null,\n      avatar: null,\n      email: null,\n      dob: null\n    };\n  }\n\n  render() {\n    const {\n      isLoading,\n      name,\n      avatar,\n      email,\n      dob\n    } = this.state;\n    return React.createElement(User, {\n      isLoading: isLoading,\n      name: name,\n      avatar: avatar,\n      email: email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  async componentDidMount() {\n    // Load async data.\n    let userData = await API.get('/', {\n      params: {\n        results: 1,\n        inc: 'name,email,picture'\n      }\n    }); // Parse the results for ease of use.\n\n    userData = userData.data.results[0]; // Update state with new data and re-render our component.\n\n    const name = `${userData.name.first} ${userData.name.last}`;\n    const avatar = userData.picture.large;\n    const email = userData.email;\n    this.setState({ ...this.state,\n      ...{\n        isLoading: false,\n        name,\n        avatar,\n        email\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sharonyvette/classreview/src/App.js"],"names":["React","API","User","App","Component","constructor","props","state","isLoading","name","avatar","email","dob","render","componentDidMount","userData","get","params","results","inc","data","first","last","picture","large","setState"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,IAAI,EAAE,IAFK;AAGXC,MAAAA,MAAM,EAAE,IAHG;AAIXC,MAAAA,KAAK,EAAE,IAJI;AAKXC,MAAAA,GAAG,EAAE;AALM,KAAb;AAOD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA,SAAF;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA,KAA3B;AAAkCC,MAAAA;AAAlC,QAA0C,KAAKL,KAArD;AAEA,WACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEC,SAAjB;AAA4B,MAAA,IAAI,EAAEC,IAAlC;AAAwC,MAAA,MAAM,EAAEC,MAAhD;AAAwD,MAAA,KAAK,EAAEC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAGC,QAAMG,iBAAN,GAA0B;AACxB;AACA,QAAIC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAJ,CAAQ,GAAR,EAAa;AAChCC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,CADH;AAENC,QAAAA,GAAG,EAAE;AAFC;AADwB,KAAb,CAArB,CAFwB,CASpB;;AACJJ,IAAAA,QAAQ,GAAGA,QAAQ,CAACK,IAAT,CAAcF,OAAd,CAAsB,CAAtB,CAAX,CAVwB,CAYxB;;AACA,UAAMT,IAAI,GAAI,GAAEM,QAAQ,CAACN,IAAT,CAAcY,KAAM,IAAGN,QAAQ,CAACN,IAAT,CAAca,IAAK,EAA1D;AACA,UAAMZ,MAAM,GAAGK,QAAQ,CAACQ,OAAT,CAAiBC,KAAhC;AACA,UAAMb,KAAK,GAAGI,QAAQ,CAACJ,KAAvB;AAEA,SAAKc,QAAL,CAAc,EACZ,GAAG,KAAKlB,KADI;AACG,SAAG;AAChBC,QAAAA,SAAS,EAAE,KADK;AAEhBC,QAAAA,IAFgB;AAGhBC,QAAAA,MAHgB;AAIhBC,QAAAA;AAJgB;AADN,KAAd;AAQD;;AA/C6B;;AAiDhC,eAAeR,GAAf","sourcesContent":["// src/App.js\n\nimport React from \"react\";\n\nimport API from \"./utils/API.js\";\nimport User from \"./component/User\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      name: null,\n      avatar: null,\n      email: null,\n      dob: null\n    };\n  }\n\n  render() {\n    const { isLoading, name, avatar, email, dob } = this.state;\n\n    return (\n      <User isLoading={isLoading} name={name} avatar={avatar} email={email} />\n    );\n  }\n\n\n    async componentDidMount() {\n      // Load async data.\n      let userData = await API.get('/', {\n        params: {\n          results: 1,\n          inc: 'name,email,picture'\n        }\n      });\n\n          // Parse the results for ease of use.\n      userData = userData.data.results[0];\n\n      // Update state with new data and re-render our component.\n      const name = `${userData.name.first} ${userData.name.last}`;\n      const avatar = userData.picture.large;\n      const email = userData.email;\n\n      this.setState({\n        ...this.state, ...{\n          isLoading: false,\n          name,\n          avatar,\n          email\n        }\n      });\n    }\n  }\n  export default App;\n\n\n"]},"metadata":{},"sourceType":"module"}